{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///vue-hammerjs-image.js","webpack:///webpack/bootstrap 02701d0c8a2d1d18a55c","webpack:///src/vue-hammerjs-image/vue-hammerjs-image.vue","webpack:///./src/index.js","webpack:///./src/vue-hammerjs-image/index.js","webpack:///./src/vue-hammerjs-image/vue-hammerjs-image.vue","webpack:///./node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer.js","webpack:///./node_modules/_hammerjs-image@1.0.3@hammerjs-image/dist/hammerjs-image.js","webpack:///./node_modules/_hammerjs@2.0.8@hammerjs/hammer.js","webpack:///./src/vue-hammerjs-image/vue-hammerjs-image.vue?1889"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_hammerjs_image__","__WEBPACK_IMPORTED_MODULE_0_hammerjs_image___default","props","img","type","String","default","maxScale","Number","minScale","targetWidth","targetHeight","backgroundColor","translate3dInfo","rotation","scale","offset_x","offset_y","data","__hi","watch","translate3dInfo.rotation","setTranslate3dInfo","preview","translate3dInfo.scale","console","log","translate3dInfo.offset_x","translate3dInfo.offset_y","mounted","a","el","$el","firstElementChild","methods","getHi","setTranslate3dInfoPreview","opt","translate3d","getBase64","value","__WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_index_js__","components","VueHammerjsImage","install","vue","installed","map","component","window","Vue","__WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_vue__","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_3_vue_loader_lib_selector_type_script_index_0_vue_hammerjs_image_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_3_vue_loader_lib_template_compiler_index_id_data_v_351f3714_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_3_vue_loader_lib_selector_type_template_index_0_vue_hammerjs_image_vue__","normalizeComponent","Component","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","options","render","staticRenderFns","_compiled","functional","_scopeId","hook","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","existing","beforeCreate","_injectStyles","h","concat","g","I","__WEBPACK_EXTERNAL_MODULE__1__","t","C","r","Symbol","toStringTag","create","bind","eval","__WEBPACK_AMD_DEFINE_RESULT__","document","exportName","undefined","setTimeoutContext","fn","timeout","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","length","deprecate","method","message","deprecationMessage","e","Error","stack","replace","warn","apply","arguments","inherit","child","base","properties","childP","baseP","constructor","_super","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","target","types","handler","splitStr","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parentNode","inStr","str","find","indexOf","trim","split","inArray","src","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","b","prefixed","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","inputTarget","domHandler","ev","enable","init","createInputInstance","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","abs","getScale","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","dx","dy","DEDUP_DISTANCE","TouchAction","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","defaults","id","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","item","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","index","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","stop","force","stopped","curRecognizer","remove","on","events","off","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","_vm","_h","$createElement","_c","_self","width","height","overflow","esExports"],"mappings":"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","file":"vue-hammerjs-image.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VueHammerjsImage\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VueHammerjsImage\"] = factory();\n\telse\n\t\troot[\"VueHammerjsImage\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VueHammerjsImage\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VueHammerjsImage\"] = factory();\n\telse\n\t\troot[\"VueHammerjsImage\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_hammerjs_image__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_hammerjs_image___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_hammerjs_image__);\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'VueHammerjsImage',\n  props: {\n    img: {\n      type: String,\n      default: ''\n    },\n    maxScale: {\n      type: Number,\n      default: 2\n    },\n    minScale: {\n      type: Number,\n      default: 0.5\n    },\n    targetWidth: {\n      type: Number,\n      default: 100\n    },\n    targetHeight: {\n      type: Number,\n      default: 100\n    },\n    backgroundColor: {\n      type: String,\n      default: 'white'\n    },\n    translate3dInfo: {\n      type: Object,\n      default: function _default() {\n        return {\n          rotation: 0,\n          scale: 1,\n          offset_x: 0,\n          offset_y: 0\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      __hi: 0\n    };\n  },\n\n  watch: {\n    'translate3dInfo.rotation': function translate3dInfoRotation(n, o) {\n      this.__hi.setTranslate3dInfo({ rotation: n }).preview();\n    },\n    'translate3dInfo.scale': function translate3dInfoScale(n, o) {\n      console.log(n);\n      this.__hi.setTranslate3dInfo({ scale: n }).preview();\n    },\n    'translate3dInfo.offset_x': function translate3dInfoOffset_x(n, o) {\n      this.__hi.setTranslate3dInfo({ offset_x: n }).preview();\n    },\n    'translate3dInfo.offset_y': function translate3dInfoOffset_y(n, o) {\n      this.__hi.setTranslate3dInfo({ offset_y: n }).preview();\n    }\n  },\n  mounted: function mounted() {\n    console.log(this.translate3dInfo);\n    this.__hi = new __WEBPACK_IMPORTED_MODULE_0_hammerjs_image___default.a({\n      el: this.$el.firstElementChild,\n      img: this.img,\n      maxScale: this.maxScale,\n      minScale: this.minScale\n    });\n  },\n\n  methods: {\n    getHi: function getHi() {\n      return this.__hi;\n    },\n    setTranslate3dInfoPreview: function setTranslate3dInfoPreview(opt) {\n      return this.__hi.setTranslate3dInfo(opt).preview();\n    },\n    setTranslate3dInfo: function setTranslate3dInfo(opt) {\n      return this.__hi.setTranslate3dInfo(opt);\n    },\n    translate3d: function translate3d() {\n      return this.__hi.translate3d();\n    },\n    getBase64: function getBase64() {\n      return this.__hi.getBase64();\n    }\n  }\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_index_js__ = __webpack_require__(2);\n\n\nvar components = [__WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_index_js__[\"a\" /* default */]];\nvar install = function install(vue) {\n  /* istanbul ignore if */\n  if (install.installed) return;\n  /*eslint-disable*/\n  components.map(function (component) {\n    vue.component(component.name, component); //component.name 此处使用到组件vue文件中的 name 属性\n  });\n};\n/* istanbul ignore if */\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  install: install,\n  VueHammerjsImage: __WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_index_js__[\"a\" /* default */]\n});\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_vue__ = __webpack_require__(3);\n\n__WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_vue__[\"a\" /* default */].install = function (Vue) {\n  return Vue.component(__WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_vue__[\"a\" /* default */].name, __WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_vue__[\"a\" /* default */]);\n}; //.name就是开始说的vue文件暴露出来的name名，ldcPagination整个组件\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0__vue_hammerjs_image_vue__[\"a\" /* default */]);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_3_vue_loader_lib_selector_type_script_index_0_vue_hammerjs_image_vue__ = __webpack_require__(0);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_3_vue_loader_lib_template_compiler_index_id_data_v_351f3714_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_3_vue_loader_lib_selector_type_template_index_0_vue_hammerjs_image_vue__ = __webpack_require__(7);\nvar normalizeComponent = __webpack_require__(4)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_3_vue_loader_lib_selector_type_script_index_0_vue_hammerjs_image_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_3_vue_loader_lib_template_compiler_index_id_data_v_351f3714_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_3_vue_loader_lib_selector_type_template_index_0_vue_hammerjs_image_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n!function(g,I){ true?module.exports=I(__webpack_require__(6)):\"function\"==typeof define&&define.amd?define([\"hammerjs\"],I):\"object\"==typeof exports?exports[\"hammerjs-image\"]=I(require(\"hammerjs\")):g.hammerjsImage=I(g.Hammer)}(window,function(__WEBPACK_EXTERNAL_MODULE__1__){return function(g){var I={};function t(C){if(I[C])return I[C].exports;var n=I[C]={i:C,l:!1,exports:{}};return g[C].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=g,t.c=I,t.d=function(g,I,C){t.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:C})},t.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},t.t=function(g,I){if(1&I&&(g=t(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var C=Object.create(null);if(t.r(C),Object.defineProperty(C,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var n in g)t.d(C,n,function(I){return g[I]}.bind(null,n));return C},t.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return t.d(I,\"a\",I),I},t.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},t.p=\"\",t(t.s=0)}([function(module,exports,__webpack_require__){eval(\"var Hammer = __webpack_require__(1)\\r\\nif (!Hammer) { Hammer = window.Hammer }\\r\\nwindow.HammerjsImage = function HammerjsImage(opt) {\\r\\n    var that = this\\r\\n    var offset_x = 0\\r\\n    var offset_y = 0\\r\\n    var scale = 1\\r\\n    var rotation = 0\\r\\n    var last_offset_x = 0\\r\\n    var last_offset_y = 0\\r\\n    var last_scale = 1\\r\\n    var last_rotation = 0\\r\\n    var start_otation = 0\\r\\n    var canvas_info = {\\r\\n        width: 580,\\r\\n        height: 870\\r\\n    }\\r\\n    this.zoom = 1\\r\\n    this.maxScale = isNaN(opt.maxScale) ? 2 : opt.maxScale\\r\\n    this.minScale = isNaN(opt.minScale) ? 0.5 : opt.minScale\\r\\n    if (!(opt.id || opt.el)) {\\r\\n        return console.error('没有需要旋转的元素')\\r\\n    }\\r\\n    var square = opt.id ? document.querySelector(opt.id) : opt.el;\\r\\n    square.style.overflow = 'hidden'\\r\\n    if (square.style.backgroundColor === '') {\\r\\n        square.style.backgroundColor = '#FFFFFF'\\r\\n    }\\r\\n    square.onmousewheel = function(e) {\\r\\n        if (e.wheelDelta > 0) {\\r\\n            scale = scale < that.maxScale ? scale + 0.1 : that.maxScale\\r\\n        } else {\\r\\n            scale = scale > that.minScale ? scale - 0.1 : that.minScale\\r\\n        }\\r\\n        that.preview()\\r\\n    }\\r\\n\\r\\n    var hammertime = new Hammer.Manager(square)\\r\\n\\r\\n    var img = document.createElement('img')\\r\\n    img.style.maxHeight = '100%'\\r\\n    img.style.maxWidth = '100%'\\r\\n    img.align = 'left'\\r\\n    img.ondragstart = function() {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    img.onload = function() {\\r\\n        that.zoom = this.naturalWidth / this.width\\r\\n        canvas_info.width = that.zoom * square.offsetWidth\\r\\n        canvas_info.height = that.zoom * square.offsetHeight\\r\\n    }\\r\\n\\r\\n    img.src = opt.img\\r\\n    square.appendChild(img)\\r\\n\\r\\n    this.getTranslate3dInfo = function() {\\r\\n        return {\\r\\n            offset_x,\\r\\n            offset_y,\\r\\n            scale,\\r\\n            rotation\\r\\n        }\\r\\n    }\\r\\n\\r\\n    this.setTranslate3dInfo = function(opt) {\\r\\n        if (opt.offset_x !== undefined) {\\r\\n            offset_x = opt.offset_x\\r\\n        }\\r\\n        if (opt.offset_y !== undefined) {\\r\\n            offset_y = opt.offset_y\\r\\n        }\\r\\n        if (opt.scale !== undefined) {\\r\\n            scale = opt.scale\\r\\n        }\\r\\n        if (opt.rotation !== undefined) {\\r\\n            rotation = opt.rotation\\r\\n        }\\r\\n        return that\\r\\n    }\\r\\n\\r\\n    this.getBase64 = function() {\\r\\n        return that.translate3d().toDataURL()\\r\\n    }\\r\\n\\r\\n    this.preview = function() {\\r\\n        if (scale > that.maxScale) {\\r\\n            scale = that.maxScale\\r\\n        } else if (scale < that.minScale) {\\r\\n            scale = that.minScale\\r\\n        }\\r\\n        var transform = \\\"translate3d(\\\" + offset_x + \\\"px,\\\" + offset_y + \\\"px,0)\\\" + \\\"scale3d(\\\" + scale + \\\",\\\" + scale + \\\",1)\\\" + \\\"rotate(\\\" + rotation + \\\"deg)\\\";\\r\\n        img.style.webkitTransform = transform;\\r\\n        that.onPreviewChange(that, {\\r\\n            offset_x,\\r\\n            offset_y,\\r\\n            scale,\\r\\n            rotation\\r\\n        })\\r\\n    }\\r\\n\\r\\n    this.onPreviewChange = function() {\\r\\n\\r\\n    }\\r\\n\\r\\n    this.translate3d = function() {\\r\\n        var c = document.createElement('canvas')\\r\\n        c.height = canvas_info.height;\\r\\n        c.width = canvas_info.width;\\r\\n        var ctx = c.getContext(\\\"2d\\\");\\r\\n        ctx.translate(img.naturalWidth * (1 - scale) / 2, img.naturalHeight * (1 - scale) / 2)\\r\\n        ctx.translate(offset_x * that.zoom, offset_y * that.zoom)\\r\\n        var x = (img.naturalHeight * Math.sin(rotation * Math.PI / 180) - (img.naturalHeight * Math.sin(rotation * Math.PI / 180) + img.naturalWidth * Math.cos(rotation * Math.PI / 180) - img.naturalWidth) / 2) * scale\\r\\n        var y = -(img.naturalWidth * Math.sin(rotation * Math.PI / 180) + img.naturalHeight * Math.cos(rotation * Math.PI / 180) - img.naturalHeight) / 2 * scale\\r\\n        ctx.translate(x, y)\\r\\n        ctx.rotate(rotation * Math.PI / 180);\\r\\n        ctx.scale(scale, scale)\\r\\n        ctx.drawImage(img, 0, 0)\\r\\n        return c\\r\\n    }\\r\\n\\r\\n    var Pan = new Hammer.Pan();\\r\\n    var Rotate = new Hammer.Rotate();\\r\\n    var Pinch = new Hammer.Pinch();\\r\\n    var DoubleTap = new Hammer.Tap({\\r\\n        event: 'doubletap',\\r\\n        taps: 2\\r\\n    });\\r\\n    Rotate.recognizeWith([Pan]);\\r\\n    Pinch.recognizeWith([Rotate, Pan]);\\r\\n    hammertime.add([Pan, Pinch, Rotate, DoubleTap]);\\r\\n    hammertime.on('mousewheel panmove panend pinchmove pinchend rotatestart rotatemove rotateend doubletap', function(e) {\\r\\n        switch (e.type) {\\r\\n            case 'doubletap':\\r\\n                if (rotation % 360 < 90) {\\r\\n                    rotation = 90\\r\\n                } else if (rotation % 360 < 180) {\\r\\n                    rotation = 180\\r\\n                } else if (rotation % 360 < 270) {\\r\\n                    rotation = 270\\r\\n                } else if (rotation % 360 < 360) {\\r\\n                    rotation = 360\\r\\n                }\\r\\n                break;\\r\\n            case 'panmove':\\r\\n                offset_x = last_offset_x + e.deltaX;\\r\\n                offset_y = last_offset_y + e.deltaY;\\r\\n                break;\\r\\n            case 'panend':\\r\\n                last_offset_x = last_offset_x + e.deltaX;\\r\\n                last_offset_y = last_offset_y + e.deltaY;\\r\\n                break;\\r\\n            case 'pinchmove':\\r\\n                scale = e.scale * last_scale\\r\\n                break;\\r\\n            case 'pinchend':\\r\\n                scale = e.scale * last_scale;\\r\\n                last_scale = scale;\\r\\n                break;\\r\\n            case 'rotatemove':\\r\\n                var diff = start_otation - e.rotation;\\r\\n                rotation = last_rotation - diff;\\r\\n                break;\\r\\n            case 'rotatestart':\\r\\n                last_rotation = rotation;\\r\\n                start_otation = e.rotation;\\r\\n                break;\\r\\n            case 'rotateend':\\r\\n                last_rotation = rotation;\\r\\n                break;\\r\\n        }\\r\\n        that.preview()\\r\\n    })\\r\\n}\\r\\n\\r\\nmodule.exports = HammerjsImage\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYW1tZXJqc0ltYWdlL2V4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJoYW1tZXJqc1wiLFwiY29tbW9uanMyXCI6XCJoYW1tZXJqc1wiLFwiYW1kXCI6XCJoYW1tZXJqc1wiLFwicm9vdFwiOlwiSGFtbWVyXCJ9PzAwNzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///1\\n\")}])});\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return Hammer;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{style:({width: _vm.targetWidth + 'px', height: _vm.targetHeight + 'px', backgroundColor: _vm.backgroundColor, overflow:'hidden' })})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// vue-hammerjs-image.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 02701d0c8a2d1d18a55c","<template>\r\n  <div>\r\n    <div :style=\"{width: targetWidth + 'px', height: targetHeight + 'px', backgroundColor: backgroundColor, overflow:'hidden' }\">\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport HammerjsImage from 'hammerjs-image'\r\nexport default {\r\n  name: 'VueHammerjsImage',\r\n  props: {\r\n    img: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    maxScale: {\r\n      type: Number,\r\n      default: 2,\r\n    },\r\n    minScale: {\r\n      type: Number,\r\n      default: 0.5\r\n    },\r\n    targetWidth: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    targetHeight: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    backgroundColor: {\r\n      type: String,\r\n      default: 'white'\r\n    },\r\n    translate3dInfo: {\r\n      type: Object,\r\n      default: function() {\r\n        return {\r\n          rotation: 0,\r\n          scale: 1,\r\n          offset_x: 0,\r\n          offset_y: 0\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      __hi: 0\r\n    }\r\n  },\r\n  watch: {\r\n    'translate3dInfo.rotation': function(n, o) {\r\n      this.__hi.setTranslate3dInfo({ rotation: n }).preview()\r\n    },\r\n    'translate3dInfo.scale': function(n, o) {\r\n      console.log(n)\r\n      this.__hi.setTranslate3dInfo({ scale: n }).preview()\r\n    },\r\n    'translate3dInfo.offset_x': function(n, o) {\r\n      this.__hi.setTranslate3dInfo({ offset_x: n }).preview()\r\n    },\r\n    'translate3dInfo.offset_y': function(n, o) {\r\n      this.__hi.setTranslate3dInfo({ offset_y: n }).preview()\r\n    }\r\n  },\r\n  mounted() {\r\n    console.log(this.translate3dInfo)\r\n    this.__hi = new HammerjsImage({\r\n        el: this.$el.firstElementChild,\r\n        img: this.img,\r\n        maxScale: this.maxScale,\r\n        minScale: this.minScale\r\n    })\r\n  },\r\n  methods: {\r\n    getHi() {\r\n      return this.__hi\r\n    },\r\n    setTranslate3dInfoPreview(opt) {\r\n      return this.__hi.setTranslate3dInfo(opt).preview()\r\n    },\r\n    setTranslate3dInfo(opt) {\r\n      return this.__hi.setTranslate3dInfo(opt)\r\n    },\r\n    translate3d() {\r\n      return this.__hi.translate3d()\r\n    },\r\n    getBase64() {\r\n      return this.__hi.getBase64()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// src/vue-hammerjs-image/vue-hammerjs-image.vue","import VueHammerjsImage from './vue-hammerjs-image/index.js'\r\n\r\nconst components = [VueHammerjsImage]\r\nconst install = function(vue) {\r\n  /* istanbul ignore if */\r\n  if (install.installed) return;\r\n  /*eslint-disable*/\r\n  components.map((component) => {\r\n    vue.component(component.name, component); //component.name 此处使用到组件vue文件中的 name 属性\r\n  });\r\n};\r\n/* istanbul ignore if */\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n  install(window.Vue);\r\n};\r\n\r\nexport default {\r\n  install,\r\n  VueHammerjsImage\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import VueHammerjsImage from './vue-hammerjs-image.vue';\r\nVueHammerjsImage.install = Vue => Vue.component(VueHammerjsImage.name, VueHammerjsImage);//.name就是开始说的vue文件暴露出来的name名，ldcPagination整个组件\r\nexport default VueHammerjsImage\n\n\n// WEBPACK FOOTER //\n// ./src/vue-hammerjs-image/index.js","var normalizeComponent = require(\"!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./vue-hammerjs-image.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./vue-hammerjs-image.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-351f3714\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./vue-hammerjs-image.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/vue-hammerjs-image/vue-hammerjs-image.vue\n// module id = 3\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer.js\n// module id = 4\n// module chunks = 0","!function(g,I){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=I(require(\"hammerjs\")):\"function\"==typeof define&&define.amd?define([\"hammerjs\"],I):\"object\"==typeof exports?exports[\"hammerjs-image\"]=I(require(\"hammerjs\")):g.hammerjsImage=I(g.Hammer)}(window,function(__WEBPACK_EXTERNAL_MODULE__1__){return function(g){var I={};function t(C){if(I[C])return I[C].exports;var n=I[C]={i:C,l:!1,exports:{}};return g[C].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=g,t.c=I,t.d=function(g,I,C){t.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:C})},t.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},t.t=function(g,I){if(1&I&&(g=t(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var C=Object.create(null);if(t.r(C),Object.defineProperty(C,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var n in g)t.d(C,n,function(I){return g[I]}.bind(null,n));return C},t.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return t.d(I,\"a\",I),I},t.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},t.p=\"\",t(t.s=0)}([function(module,exports,__webpack_require__){eval(\"var Hammer = __webpack_require__(1)\\r\\nif (!Hammer) { Hammer = window.Hammer }\\r\\nwindow.HammerjsImage = function HammerjsImage(opt) {\\r\\n    var that = this\\r\\n    var offset_x = 0\\r\\n    var offset_y = 0\\r\\n    var scale = 1\\r\\n    var rotation = 0\\r\\n    var last_offset_x = 0\\r\\n    var last_offset_y = 0\\r\\n    var last_scale = 1\\r\\n    var last_rotation = 0\\r\\n    var start_otation = 0\\r\\n    var canvas_info = {\\r\\n        width: 580,\\r\\n        height: 870\\r\\n    }\\r\\n    this.zoom = 1\\r\\n    this.maxScale = isNaN(opt.maxScale) ? 2 : opt.maxScale\\r\\n    this.minScale = isNaN(opt.minScale) ? 0.5 : opt.minScale\\r\\n    if (!(opt.id || opt.el)) {\\r\\n        return console.error('没有需要旋转的元素')\\r\\n    }\\r\\n    var square = opt.id ? document.querySelector(opt.id) : opt.el;\\r\\n    square.style.overflow = 'hidden'\\r\\n    if (square.style.backgroundColor === '') {\\r\\n        square.style.backgroundColor = '#FFFFFF'\\r\\n    }\\r\\n    square.onmousewheel = function(e) {\\r\\n        if (e.wheelDelta > 0) {\\r\\n            scale = scale < that.maxScale ? scale + 0.1 : that.maxScale\\r\\n        } else {\\r\\n            scale = scale > that.minScale ? scale - 0.1 : that.minScale\\r\\n        }\\r\\n        that.preview()\\r\\n    }\\r\\n\\r\\n    var hammertime = new Hammer.Manager(square)\\r\\n\\r\\n    var img = document.createElement('img')\\r\\n    img.style.maxHeight = '100%'\\r\\n    img.style.maxWidth = '100%'\\r\\n    img.align = 'left'\\r\\n    img.ondragstart = function() {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    img.onload = function() {\\r\\n        that.zoom = this.naturalWidth / this.width\\r\\n        canvas_info.width = that.zoom * square.offsetWidth\\r\\n        canvas_info.height = that.zoom * square.offsetHeight\\r\\n    }\\r\\n\\r\\n    img.src = opt.img\\r\\n    square.appendChild(img)\\r\\n\\r\\n    this.getTranslate3dInfo = function() {\\r\\n        return {\\r\\n            offset_x,\\r\\n            offset_y,\\r\\n            scale,\\r\\n            rotation\\r\\n        }\\r\\n    }\\r\\n\\r\\n    this.setTranslate3dInfo = function(opt) {\\r\\n        if (opt.offset_x !== undefined) {\\r\\n            offset_x = opt.offset_x\\r\\n        }\\r\\n        if (opt.offset_y !== undefined) {\\r\\n            offset_y = opt.offset_y\\r\\n        }\\r\\n        if (opt.scale !== undefined) {\\r\\n            scale = opt.scale\\r\\n        }\\r\\n        if (opt.rotation !== undefined) {\\r\\n            rotation = opt.rotation\\r\\n        }\\r\\n        return that\\r\\n    }\\r\\n\\r\\n    this.getBase64 = function() {\\r\\n        return that.translate3d().toDataURL()\\r\\n    }\\r\\n\\r\\n    this.preview = function() {\\r\\n        if (scale > that.maxScale) {\\r\\n            scale = that.maxScale\\r\\n        } else if (scale < that.minScale) {\\r\\n            scale = that.minScale\\r\\n        }\\r\\n        var transform = \\\"translate3d(\\\" + offset_x + \\\"px,\\\" + offset_y + \\\"px,0)\\\" + \\\"scale3d(\\\" + scale + \\\",\\\" + scale + \\\",1)\\\" + \\\"rotate(\\\" + rotation + \\\"deg)\\\";\\r\\n        img.style.webkitTransform = transform;\\r\\n        that.onPreviewChange(that, {\\r\\n            offset_x,\\r\\n            offset_y,\\r\\n            scale,\\r\\n            rotation\\r\\n        })\\r\\n    }\\r\\n\\r\\n    this.onPreviewChange = function() {\\r\\n\\r\\n    }\\r\\n\\r\\n    this.translate3d = function() {\\r\\n        var c = document.createElement('canvas')\\r\\n        c.height = canvas_info.height;\\r\\n        c.width = canvas_info.width;\\r\\n        var ctx = c.getContext(\\\"2d\\\");\\r\\n        ctx.translate(img.naturalWidth * (1 - scale) / 2, img.naturalHeight * (1 - scale) / 2)\\r\\n        ctx.translate(offset_x * that.zoom, offset_y * that.zoom)\\r\\n        var x = (img.naturalHeight * Math.sin(rotation * Math.PI / 180) - (img.naturalHeight * Math.sin(rotation * Math.PI / 180) + img.naturalWidth * Math.cos(rotation * Math.PI / 180) - img.naturalWidth) / 2) * scale\\r\\n        var y = -(img.naturalWidth * Math.sin(rotation * Math.PI / 180) + img.naturalHeight * Math.cos(rotation * Math.PI / 180) - img.naturalHeight) / 2 * scale\\r\\n        ctx.translate(x, y)\\r\\n        ctx.rotate(rotation * Math.PI / 180);\\r\\n        ctx.scale(scale, scale)\\r\\n        ctx.drawImage(img, 0, 0)\\r\\n        return c\\r\\n    }\\r\\n\\r\\n    var Pan = new Hammer.Pan();\\r\\n    var Rotate = new Hammer.Rotate();\\r\\n    var Pinch = new Hammer.Pinch();\\r\\n    var DoubleTap = new Hammer.Tap({\\r\\n        event: 'doubletap',\\r\\n        taps: 2\\r\\n    });\\r\\n    Rotate.recognizeWith([Pan]);\\r\\n    Pinch.recognizeWith([Rotate, Pan]);\\r\\n    hammertime.add([Pan, Pinch, Rotate, DoubleTap]);\\r\\n    hammertime.on('mousewheel panmove panend pinchmove pinchend rotatestart rotatemove rotateend doubletap', function(e) {\\r\\n        switch (e.type) {\\r\\n            case 'doubletap':\\r\\n                if (rotation % 360 < 90) {\\r\\n                    rotation = 90\\r\\n                } else if (rotation % 360 < 180) {\\r\\n                    rotation = 180\\r\\n                } else if (rotation % 360 < 270) {\\r\\n                    rotation = 270\\r\\n                } else if (rotation % 360 < 360) {\\r\\n                    rotation = 360\\r\\n                }\\r\\n                break;\\r\\n            case 'panmove':\\r\\n                offset_x = last_offset_x + e.deltaX;\\r\\n                offset_y = last_offset_y + e.deltaY;\\r\\n                break;\\r\\n            case 'panend':\\r\\n                last_offset_x = last_offset_x + e.deltaX;\\r\\n                last_offset_y = last_offset_y + e.deltaY;\\r\\n                break;\\r\\n            case 'pinchmove':\\r\\n                scale = e.scale * last_scale\\r\\n                break;\\r\\n            case 'pinchend':\\r\\n                scale = e.scale * last_scale;\\r\\n                last_scale = scale;\\r\\n                break;\\r\\n            case 'rotatemove':\\r\\n                var diff = start_otation - e.rotation;\\r\\n                rotation = last_rotation - diff;\\r\\n                break;\\r\\n            case 'rotatestart':\\r\\n                last_rotation = rotation;\\r\\n                start_otation = e.rotation;\\r\\n                break;\\r\\n            case 'rotateend':\\r\\n                last_rotation = rotation;\\r\\n                break;\\r\\n        }\\r\\n        that.preview()\\r\\n    })\\r\\n}\\r\\n\\r\\nmodule.exports = HammerjsImage\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYW1tZXJqc0ltYWdlL2V4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJoYW1tZXJqc1wiLFwiY29tbW9uanMyXCI6XCJoYW1tZXJqc1wiLFwiYW1kXCI6XCJoYW1tZXJqc1wiLFwicm9vdFwiOlwiSGFtbWVyXCJ9PzAwNzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///1\\n\")}])});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_hammerjs-image@1.0.3@hammerjs-image/dist/hammerjs-image.js\n// module id = 5\n// module chunks = 0","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_hammerjs@2.0.8@hammerjs/hammer.js\n// module id = 6\n// module chunks = 0","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{style:({width: _vm.targetWidth + 'px', height: _vm.targetHeight + 'px', backgroundColor: _vm.backgroundColor, overflow:'hidden' })})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-351f3714\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/vue-hammerjs-image/vue-hammerjs-image.vue\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}